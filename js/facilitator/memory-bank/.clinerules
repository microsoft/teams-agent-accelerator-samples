# Teams Agent Project Rules and Patterns

## Project Intelligence

### File Organization
1. Core agent files go in `src/agent/`
2. Capabilities each get their own directory under `src/capabilities/`
3. Memory bank files stay in `src/memory/`
4. Entry point remains at `src/index.ts`

### Coding Patterns
1. Always use TypeScript strict mode
2. Implement Capability interface for new capabilities
3. Use asynchronous message handling
4. Register capabilities in main index.ts

### Naming Conventions
1. Capability classes end with 'Capability' (e.g., SummarizationCapability)
2. Interface files use '.interface.ts' extension
3. Core components use descriptive, role-based names
4. Use PascalCase for classes, camelCase for methods/properties

### Implementation Patterns
1. Each capability should:
   - Define clear keywords
   - Handle messages asynchronously
   - Return null for no response
   - Document public methods

2. Message handling:
   - Always check authentication first
   - Use proper typing for messages
   - Handle errors gracefully
   - Log important events

### Development Workflow
1. Run with `npm run dev` for local development
2. Test new capabilities in isolation first
3. Use Teams Toolkit for debugging
4. Follow TypeScript best practices

### Documentation Requirements
1. Update memory bank for significant changes
2. Document capability interfaces
3. Include usage examples
4. Maintain architecture diagrams

## Learned Patterns

### Core System
- Agent handles basic Teams integration
- Router manages message distribution
- Manager maintains capability registry
- Capabilities are independent modules

### User Interaction
- Keywords trigger specific capabilities
- Multiple capabilities can respond
- Responses are aggregated
- Authentication is handled automatically

### Technical Decisions
1. Use TypeScript for type safety
2. Modular architecture for extensibility
3. Event-driven message handling
4. Interface-based capability design

## Project Evolution
- Started with basic message echo
- Added modular capability system
- Implemented first sample capability
- Established memory bank structure

## Known Challenges
1. Teams SDK type definitions
2. Error handling complexity
3. Message context management
4. Capability coordination

## Tool Usage Patterns
1. Teams Toolkit for debugging
2. TypeScript for development
3. npm for package management
4. nodemon for hot reloading
